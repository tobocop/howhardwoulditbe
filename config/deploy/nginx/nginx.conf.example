worker_processes 1;

# # drop privileges, root is needed on most systems for binding to port 80
# # (or anything < 1024).  Capability-based security may be available for
# # your system and worth checking out so you won't need to be root to
# # start nginx to bind on 80
user nobody nogroup; # for systems with a "nogroup"
# user nobody nobody; # for systems with "nobody" as a group instead

# Feel free to change all paths to suite your needs here, of course
pid /var/www/plink-www/shared/pids/nginx.pid;
error_log /var/log/nginx/error.log;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # "on" if nginx worker_processes > 1
  # use epoll; # enable for Linux 2.6+
  # use kqueue; # enable for FreeBSD, OSX
}

http {
  real_ip_header     X-Forwarded-For;
  set_real_ip_from   10.0.0.0/8;
  set_real_ip_from   172.16.0.0/12;
  set_real_ip_from   192.168.0.0/16;
  include blockips.conf;

  # nginx will find this file in the config directory set at nginx build time
  include mime.types;
  server_tokens off;

  # fallback in case we can't determine a type
  default_type application/octet-stream;

  # click tracking!
  access_log /var/log/nginx/access.log combined;

  # you generally want to serve static files with nginx since neither
  # Unicorn nor Rainbows! is optimized for it at the moment
  sendfile on;

  tcp_nopush on;
  tcp_nodelay off;

  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.";
  gzip_types text/plain text/html text/xml text/css
             text/comma-separated-values
             text/javascript application/x-javascript
             application/atom+xml;

  upstream unicorn {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).

    # for UNIX domain socket setups:
    server unix://var/www/plink-www/shared/sockets/unicorn.sock fail_timeout=0;

    # for TCP setups, point these to your backend servers
    # server 192.168.0.7:8080 fail_timeout=0;
    # server 192.168.0.8:8080 fail_timeout=0;
    # server 192.168.0.9:8080 fail_timeout=0;
  }

  server {
	listen 8081 ssl;
	server_name reg.plink.com;
	ssl_certificate /etc/nginx/ssl-certs/reg.plink.com/reg.plink.com.chained.crt;
	ssl_certificate_key /etc/nginx/ssl-certs/reg.plink.com/reg.plink.com.key;

	rewrite ^ https://points.plink.com/deprecated_link$request_uri? permanent;
}

  server {
    listen 80 default; # for Linux
    server_name points.plink.com;
    rewrite ^ https://$server_name$request_uri? permanent;
  }

  server {
    listen 443 default ssl;
    ssl_certificate /etc/nginx/ssl-certs/points.plink.com/points.plink.com.chained.crt;
    ssl_certificate_key /etc/nginx/ssl-certs/points.plink.com/points.plink.com.key;

    # If you have IPv6, you'll likely want to have two separate listeners.
    # One on IPv4 only (the default), and another on IPv6 only instead
    # of a single dual-stack listener.  A dual-stack listener will make
    # for ugly IPv4 addresses in $remote_addr (e.g ":ffff:10.0.0.1"
    # instead of just "10.0.0.1") and potentially trigger bugs in
    # some software.
    # listen [::]:80 ipv6only=on; # deferred or accept_filter recommended

    client_max_body_size 4G;
    server_name points.plink.com;

    # ~2 seconds is often enough for most folks to parse HTML/CSS and
    # retrieve needed images/icons/frames, connections are cheap in
    # nginx so increasing this is generally safe...
    keepalive_timeout 5;

    root /var/www/plink-www/current;

    # Prefer to serve static files directly from nginx to avoid unnecessary
    # data copies from the application server.
    #
    # try_files directive appeared in in nginx 0.7.27 and has stabilized
    # over time.  Older versions of nginx (e.g. 0.6.x) requires
    # "if (!-f $request_filename)" which was less efficient:
    # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
    # try_files $uri/index.html $uri.html $uri @app;

    location / {
      if (-f $document_root/maintenance) {
        return 503;
      }

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if you forward HTTPS traffic to unicorn,
      # this helps Rack set the proper URL scheme for doing redirects:
      # proxy_set_header X-Forwarded-Proto $scheme;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # set "proxy_buffering off" *only* for Rainbows! when doing
      # Comet/long-poll/streaming.  It's also safe to set if you're using
      # only serving fast clients with Unicorn + nginx, but not slow
      # clients.  You normally want nginx to buffer responses to slow
      # clients, even with Rails 3.1 streaming because otherwise a slow
      # client can become a bottleneck of Unicorn.
      #
      # The Rack application may also set "X-Accel-Buffering (yes|no)"
      # in the response headers do disable/enable buffering on a
      # per-response basis.
      # proxy_buffering off;

      proxy_pass http://unicorn;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
      root //var/www/plink-www/current/public;
      expires       max;
      log_not_found off;
    }

    location @maintenance { # Maintenance mode
      return 503;
    }

    # Rails error pages
    error_page 503 @maintenace_page;
    location @maintenace_page {
      root /var/www/maintenance;
      rewrite ^(.*)$ /maintenance.html break;
      return 503;
    }

    # Rails error pages
    error_page 500 502 504 /500.html;
    location = /500.html {
      root /var/www/plink-www/current/public;
    }
  }
}
