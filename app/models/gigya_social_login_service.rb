class GigyaSocialLoginService
  class GigyaNotificationError < Exception;
  end

  attr_reader :gigya_id, :email, :first_name, :gigya_connection, :avatar_thumbnail_url

  attr_accessor :user

  def initialize(params)
    @gigya_connection = params.fetch(:gigya_connection)
    @gigya_id = params[:UID]
    @email = params[:email]
    @first_name = params[:firstName]
    @avatar_thumbnail_url = params[:photoURL]
  end

  def sign_in_user
    if gigya_id_is_valid_primary_key
      user = Plink::User.find(gigya_id.to_i)
    else
      user = Plink::User.find_by_email(email) || create_user_from_gigya
    end

    update_user_thumbnail(user)
    self.user = user

    GigyaLoginResponse.new(true)
  end

  class GigyaLoginResponse
    attr_reader :success, :message

    def initialize(success, message = '')
      @success = success
      @message = message
    end

    def success?
      success
    end
  end

  private

  def create_user_from_gigya
    password = Password.autogenerated

    user = Plink::UserCreationService.new(email: email, first_name: first_name, password_hash: password.hashed_value, salt: password.salt, avatar_thumbnail_url: avatar_thumbnail_url).create_user

    response = gigya_connection.notify_registration(gigya_id: gigya_id, site_user_id: user.id)
    raise GigyaNotificationError unless response.successful?

    user
  end

  def update_user_thumbnail(user)
    user.update_attributes(avatar_thumbnail_url: @avatar_thumbnail_url) unless user.avatar_thumbnail_url?
  end

  def gigya_id_is_valid_primary_key
    gigya_id.to_i.to_s == gigya_id
  end
end